#!/usr/bin/env bash
# Git pre-push hook for Rust project
# Runs more comprehensive checks before pushing to remote
#
# Setup: git config core.hooksPath .githooks
# Usage: Runs automatically on 'git push'
# Bypass: git push --no-verify (not recommended)

set -e

# Set up PATH to include common Rust installation locations
# Git hooks run with minimal PATH, so we need to ensure cargo is available
export PATH="$HOME/.cargo/bin:/usr/local/bin:/opt/homebrew/bin:$PATH"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${GREEN}üöÄ Running pre-push validation...${NC}"

# Check if we're in a Rust project
if [ ! -f "Cargo.toml" ]; then
    echo -e "${RED}‚ùå Not a Rust project (no Cargo.toml found)${NC}"
    exit 1
fi

# Check if cargo is available
if ! command -v cargo >/dev/null 2>&1; then
    echo -e "${RED}‚ùå cargo command not found${NC}"
    echo -e "${YELLOW}üí° Please ensure Rust is installed: https://rustup.rs/${NC}"
    echo -e "${YELLOW}   Current PATH: $PATH${NC}"
    exit 1
fi

# 1. Ensure formatting is correct (should be fixed by pre-commit)
echo -e "${YELLOW}üìù Verifying code formatting...${NC}"
if ! cargo fmt --all --check >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Code formatting issues found${NC}"
    echo -e "${YELLOW}üí° Run 'cargo fmt --all' to fix formatting${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ Code formatting is correct${NC}"
fi

# 2. Ensure no clippy warnings (should be fixed by pre-commit)
echo -e "${YELLOW}üîç Verifying no lint warnings...${NC}"
if ! cargo clippy --all-targets --all-features -- -D warnings >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Clippy warnings found${NC}"
    cargo clippy --all-targets --all-features -- -D warnings
    echo ""
    echo -e "${YELLOW}üí° Fix warnings and commit again${NC}"
    exit 1
else
    echo -e "${GREEN}‚úÖ No clippy warnings${NC}"
fi

# 3. Build in release mode (quick check only)
echo -e "${YELLOW}üî® Verifying release build...${NC}"
if ! timeout 90 cargo check --release --all-features >/dev/null 2>&1; then
    echo -e "${RED}‚ùå Release build check failed${NC}"
    echo -e "${YELLOW}üí° Running full build to show errors:${NC}"
    cargo build --release --all-features
    exit 1
else
    echo -e "${GREEN}‚úÖ Release build check successful${NC}"
fi

# 4. Run core tests only (nextest, faster than full suite)
echo -e "${YELLOW}üß™ Running core test validation (nextest)...${NC}"
if command -v cargo-nextest >/dev/null 2>&1; then
    # Match CI flags for parity: all-features, immediate failure output, no retries,
    # and lib/bin targets only (doctests are checked separately below)
    if ! timeout 120 cargo nextest run \
        --all-features >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Core tests failed${NC}"
        echo ""
        echo -e "${YELLOW}üí° Please fix failing tests and push again${NC}"
        exit 1
    else
        echo -e "${GREEN}‚úÖ Core tests pass${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  cargo-nextest not installed; falling back to cargo test${NC}"
    if ! timeout 90 cargo test --all-features >/dev/null 2>&1; then
        echo -e "${RED}‚ùå Core tests failed${NC}"
        echo ""
        echo -e "${YELLOW}üí° Please fix failing tests and push again${NC}"
        exit 1
    else
        echo -e "${GREEN}‚úÖ Core tests pass${NC}"
    fi
fi

# 5. Quick doc test check
# Note: nextest doesn't run doctests yet; use cargo test for docs only.
echo -e "${YELLOW}üìö Running documentation tests...${NC}"
if ! timeout 30 cargo test --doc --all-features >/dev/null 2>&1; then
    echo -e "${YELLOW}‚ö†Ô∏è  Documentation tests failed (not blocking push)${NC}"
    echo -e "${YELLOW}üí° Consider fixing doc tests when convenient${NC}"
else
    echo -e "${GREEN}‚úÖ Documentation tests pass${NC}"
fi

# 6. Security audit (warn but don't block, with timeout)
echo -e "${YELLOW}üîí Running security audit...${NC}"
if command -v cargo-audit >/dev/null 2>&1; then
    if ! timeout 20 cargo audit >/dev/null 2>&1; then
        echo -e "${YELLOW}‚ö†Ô∏è  Security advisories found (not blocking push):${NC}"
        timeout 20 cargo audit || echo -e "${YELLOW}‚ö†Ô∏è  Security audit timed out${NC}"
        echo ""
        echo -e "${YELLOW}üí° Consider addressing security issues${NC}"
    else
        echo -e "${GREEN}‚úÖ No security advisories${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  cargo-audit not installed, skipping security check${NC}"
    echo -e "${YELLOW}üí° Install with: cargo install cargo-audit${NC}"
fi

echo ""
echo -e "${GREEN}üéâ All pre-push checks passed! Push proceeding...${NC}"
