name: Quality Assurance

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  NODE_VERSION: '22'  # Latest LTS (v22.18.0)

# Cancel in-progress runs when a new commit is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build_artifacts:
    name: Build Frontend & Release Binary
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm

    - name: Install npm dependencies
      run: npm ci --prefer-offline

    - name: Build web assets
      run: npm run build:web

    - name: Setup Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88.0

    - name: Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: build-artifacts
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Build release binary
      run: cargo build --release --all-features

    - name: Bundle artifacts for reuse
      run: |
        rm -rf ci-artifacts
        mkdir -p ci-artifacts/target/web ci-artifacts/target/release
        rsync -a target/web/ ci-artifacts/target/web/
        found=0
        for bin in target/release/lotar*; do
          if [ -f "$bin" ]; then
            cp "$bin" ci-artifacts/target/release/
            found=1
          fi
        done
        if [ "$found" -eq 0 ]; then
          echo "No release binaries were bundled" >&2
          exit 1
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lotar-build-artifacts
        path: ci-artifacts/
        retention-days: 3

  rust_checks:
    name: Rust Quality Checks
    runs-on: ubuntu-latest
    needs: [build_artifacts]
    env:
      USER: mallox
      USERNAME: mallox
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: lotar-build-artifacts
        path: .
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88.0
        
    - name: Rust Cache
      uses: Swatinem/rust-cache@v2  # Latest version (v2.8.0)
      with:
        cache-on-failure: true
        # More aggressive caching for CI
        shared-key: "ci-cache"
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest
        
    - name: Check code formatting
      run: cargo fmt --all --check
        
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build project (debug)
      run: cargo build --all-features
      
    - name: Run tests (nextest, fast)
      run: |
        cargo nextest run \
          --all-features \
          --failure-output=immediate-final \
          --retries 0 \
          --lib --bins --tests

    - name: Upload nextest report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nextest-report
        path: target/nextest/junit.xml
        if-no-files-found: ignore
        retention-days: 7
        
    - name: Build release (check only for speed)
      run: cargo check --release --all-features

  ui_tests:
    name: UI Unit Tests
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm

    - name: Install npm dependencies
      run: npm ci --prefer-offline

    - name: Run Vitest suite
      run: npm run test:ui

  smoke_tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [build_artifacts]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: lotar-build-artifacts
        path: artifact-cache

    - name: Restore build artifacts
      run: |
        mkdir -p target
        if [ ! -d artifact-cache/target ]; then
          echo "Expected target directory not found in artifact" >&2
          ls -R artifact-cache
          exit 1
        fi
        rsync -a artifact-cache/target/ target/
        rm -rf artifact-cache

    - name: Ensure binary is executable
      run: chmod +x target/release/lotar || true

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: npm

    - name: Install npm dependencies
      run: npm ci --prefer-offline

    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium

    - name: Configure git default branch
      run: git config --global init.defaultBranch main

    - name: Run smoke suite
      env:
        LOTAR_BINARY_PATH: ${{ github.workspace }}/target/release/lotar
      run: npm run test:smoke:quick

  windows_checks:
    name: Windows Quality Checks
    runs-on: windows-latest
    needs: [build_artifacts]
    env:
      USER: mallox
      USERNAME: mallox
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v5
      with:
        name: lotar-build-artifacts
        path: .

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88.0
        components: rustfmt, clippy

    - name: Rust Cache
      uses: Swatinem/rust-cache@v2
      with:
        cache-on-failure: true
        shared-key: "ci-cache-windows"
        save-if: ${{ github.ref == 'refs/heads/main' }}

    - name: Install cargo-nextest
      uses: taiki-e/install-action@v2
      with:
        tool: nextest

    - name: Build project (debug)
      run: cargo build --all-features

    - name: Run tests (nextest, fast)
      run: cargo nextest run --all-features --failure-output=immediate-final --retries 0 --lib --bins --tests

  # Security audit (optimized with caching, runs in parallel)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache cargo-audit
      uses: actions/cache@v4
      with:
        path: ~/.cargo/bin/cargo-audit
        key: cargo-audit-${{ runner.os }}
        
    - name: Install cargo-audit (if not cached)
      run: |
        if ! command -v cargo-audit >/dev/null 2>&1; then
          echo "Installing cargo-audit..."
          cargo install cargo-audit --locked
        else
          echo "Using cached cargo-audit"
        fi
      
    - name: Run security audit
      run: cargo audit